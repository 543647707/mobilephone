


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           ARM Cortex-M
                       3 Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.86
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;             Brian Nagel
   14 00000000         ;
   15 00000000         ; For       : ARMv7M Cortex-M3
   16 00000000         ; Mode      : Thumb2
   17 00000000         ; Toolchain : IAR EWARM
   18 00000000         ;*******************************************************
                       *************************************************
   19 00000000         
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         ;                                           PUBLIC FUNCT
                       IONS
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         
   24 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   25 00000000                 EXTERN           OSPrioCur
   26 00000000                 EXTERN           OSPrioHighRdy
   27 00000000                 EXTERN           OSTCBCur
   28 00000000                 EXTERN           OSTCBHighRdy
   29 00000000                 EXTERN           OSIntNesting
   30 00000000                 EXTERN           OSIntExit
   31 00000000                 EXTERN           OSTaskSwHook
   32 00000000         
   33 00000000         ;STM32 don't support "PUBLIC" opcode
   34 00000000         
   35 00000000         ;PUBLIC  OS_CPU_SR_Save                                 
                            ; Functions declared in this file
   36 00000000         ;PUBLIC  OS_CPU_SR_Restore
   37 00000000         ;PUBLIC  OSStartHighRdy
   38 00000000         ;PUBLIC  OSCtxSw
   39 00000000         ;PUBLIC  OSIntCtxSw
   40 00000000         ;PUBLIC  OS_CPU_PendSVHandler
   41 00000000         
   42 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   43 00000000                 EXPORT           OS_CPU_SR_Restore
   44 00000000                 EXPORT           OSStartHighRdy
   45 00000000                 EXPORT           OSCtxSw
   46 00000000                 EXPORT           OSIntCtxSw



ARM Macro Assembler    Page 2 


   47 00000000         ;EXPORT  OS_CPU_PendSVHandler
   48 00000000                 EXPORT           PendSV_Handler
   49 00000000         
   50 00000000         ;*******************************************************
                       *************************************************
   51 00000000         ;                                                EQUATES
                       
   52 00000000         ;*******************************************************
                       *************************************************
   53 00000000         
   54 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   55 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   56 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   57 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   58 00000000         
   59 00000000         ;*******************************************************
                       *************************************************
   60 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   61 00000000         ;*******************************************************
                       *************************************************
   62 00000000         
   63 00000000         ;RSEG CODE:CODE:NOROOT(2)
   64 00000000                 PRESERVE8
   65 00000000         
   66 00000000                 AREA             |.text|, CODE, READONLY
   67 00000000                 THUMB
   68 00000000         
   69 00000000         ;*******************************************************
                       *************************************************
   70 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   71 00000000         ;
   72 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   73 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   74 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   75 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   76 00000000         ;              into the CPU's status register.
   77 00000000         ;
   78 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   79 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);



ARM Macro Assembler    Page 3 


   80 00000000         ;
   81 00000000         ;
   82 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   83 00000000         ;
   84 00000000         ;                 void Task (void *p_arg)
   85 00000000         ;                 {
   86 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   87 00000000         ;                     OS_CPU_SR  cpu_sr;
   88 00000000         ;                 #endif
   89 00000000         ;
   90 00000000         ;                          :
   91 00000000         ;                          :
   92 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   93 00000000         ;                          :
   94 00000000         ;                          :
   95 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   96 00000000         ;                          :
   97 00000000         ;                          :
   98 00000000         ;                 }
   99 00000000         ;*******************************************************
                       *************************************************
  100 00000000         
  101 00000000         OS_CPU_SR_Save
  102 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  103 00000004 B672            CPSID            I
  104 00000006 4770            BX               LR
  105 00000008         
  106 00000008         OS_CPU_SR_Restore
  107 00000008 F380 8810       MSR              PRIMASK, R0
  108 0000000C 4770            BX               LR
  109 0000000E         
  110 0000000E         ;*******************************************************
                       *************************************************
  111 0000000E         ;                                          START MULTITA
                       SKING
  112 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  113 0000000E         ;
  114 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  115 0000000E         ;              the first task to start.
  116 0000000E         ;
  117 0000000E         ;           2) OSStartHighRdy() MUST:
  118 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  119 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  120 0000000E         ;              c) Set OSRunning to TRUE;
  121 0000000E         ;              d) Trigger PendSV exception;
  122 0000000E         ;              e) Enable interrupts (tasks will run with
                        interrupts enabled).
  123 0000000E         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 4 


  124 0000000E         
  125 0000000E         OSStartHighRdy
  126 0000000E 481D            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  127 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  128 00000014 7001            STRB             R1, [R0]
  129 00000016         
  130 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  131 00000018 F380 8809       MSR              PSP, R0
  132 0000001C         
  133 0000001C 481A            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  134 0000001E 2101            MOVS             R1, #1
  135 00000020 7001            STRB             R1, [R0]
  136 00000022         
  137 00000022 481A            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  138 00000024 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  139 00000028 6001            STR              R1, [R0]
  140 0000002A         
  141 0000002A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  142 0000002C         
  143 0000002C         OSStartHang
  144 0000002C E7FE            B                OSStartHang ; Should never get 
                                                            here
  145 0000002E         
  146 0000002E         
  147 0000002E         ;*******************************************************
                       *************************************************
  148 0000002E         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  149 0000002E         ;                                           void OSCtxSw
                       (void)
  150 0000002E         ;
  151 0000002E         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  152 0000002E         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  153 0000002E         ;*******************************************************
                       *************************************************
  154 0000002E         
  155 0000002E         OSCtxSw
  156 0000002E 4817            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  157 00000030 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  158 00000034 6001            STR              R1, [R0]
  159 00000036 4770            BX               LR
  160 00000038         
  161 00000038         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 5 


  162 00000038         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  163 00000038         ;                                         void OSIntCtxS
                       w(void)
  164 00000038         ;
  165 00000038         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  166 00000038         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  167 00000038         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  168 00000038         ;*******************************************************
                       *************************************************
  169 00000038         
  170 00000038         OSIntCtxSw
  171 00000038 4814            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  172 0000003A F04F 5180       LDR              R1, =NVIC_PENDSVSET
  173 0000003E 6001            STR              R1, [R0]
  174 00000040 4770            BX               LR
  175 00000042         
  176 00000042         ;*******************************************************
                       *************************************************
  177 00000042         ;                                         HANDLE PendSV 
                       EXCEPTION
  178 00000042         ;                                     void OS_CPU_PendSV
                       Handler(void)
  179 00000042         ;
  180 00000042         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  181 00000042         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  182 00000042         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  183 00000042         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  184 00000042         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  185 00000042         ;              a thread or occurs due to an interrupt or
                        exception.
  186 00000042         ;
  187 00000042         ;           2) Pseudo-code is:
  188 00000042         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  189 00000042         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  190 00000042         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  191 00000042         ;              d) Call OSTaskSwHook();
  192 00000042         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  193 00000042         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  194 00000042         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  195 00000042         ;              h) Restore R4-R11 from new process stack;
                       



ARM Macro Assembler    Page 6 


  196 00000042         ;              i) Perform exception return which will re
                       store remaining context.
  197 00000042         ;
  198 00000042         ;           3) On entry into PendSV handler:
  199 00000042         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  200 00000042         ;                 xPSR, PC, LR, R12, R0-R3
  201 00000042         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  202 00000042         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  203 00000042         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  204 00000042         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  205 00000042         ;
  206 00000042         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  207 00000042         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  208 00000042         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  209 00000042         ;*******************************************************
                       *************************************************
  210 00000042         
  211 00000042         ;OS_CPU_PendSVHandler
  212 00000042         PendSV_Handler
  213 00000042 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  214 00000044 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  215 00000048         ;CBZ     R0, OS_CPU_PendSVHandler_nosave                
                            ; Skip register save the first time
  216 00000048 B128            CBZ              R0, PendSVHandler_nosave ; Skip
                                                             register save the 
                                                            first time
  217 0000004A         
  218 0000004A 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  219 0000004C E880 0FF0       STM              R0, {R4-R11}
  220 00000050         
  221 00000050 490F            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  222 00000052 6809            LDR              R1, [R1]
  223 00000054 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  224 00000056         
  225 00000056         ; At this point, entire context of process has been save
                       d
  226 00000056         ;OS_CPU_PendSVHandler_nosave
  227 00000056         PendSVHandler_nosave
  228 00000056 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  229 00000058 480E            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  230 0000005A 4780            BLX              R0



ARM Macro Assembler    Page 7 


  231 0000005C F85D EB04       POP              {R14}
  232 00000060         
  233 00000060 480D            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  234 00000062 490E            LDR              R1, =OSPrioHighRdy
  235 00000064 780A            LDRB             R2, [R1]
  236 00000066 7002            STRB             R2, [R0]
  237 00000068         
  238 00000068 4809            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  239 0000006A 490D            LDR              R1, =OSTCBHighRdy
  240 0000006C 680A            LDR              R2, [R1]
  241 0000006E 6002            STR              R2, [R0]
  242 00000070         
  243 00000070 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  244 00000072 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  245 00000076 3020            ADDS             R0, R0, #0x20
  246 00000078 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  247 0000007C F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  248 00000080 B662            CPSIE            I
  249 00000082 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  250 00000084         
  251 00000084                 END
              E000ED22 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\os_cpu
_a.d -o.\os_cpu_a.o -IE:\mobilephone\RTE -IE:\mobilephone\RTE\Device\STM32F103Z
E -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Kei
l\STM32F1xx_DFP\2.1.0 -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Inc
lude -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\StdPeriph_Driver\inc
 -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\RTE_Driver --list=.\os_cpu_a.ls
t RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 66 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 0000002E

Symbol: OSCtxSw
   Definitions
      At line 155 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 45 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000038

Symbol: OSIntCtxSw
   Definitions
      At line 170 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 46 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002C

Symbol: OSStartHang
   Definitions
      At line 143 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 144 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 125 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 44 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 106 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 43 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 101 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 42 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSVHandler_nosave 00000056

Symbol: PendSVHandler_nosave



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 227 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 216 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: PendSVHandler_nosave used once
PendSV_Handler 00000042

Symbol: PendSV_Handler
   Definitions
      At line 212 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 48 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: PendSV_Handler used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 54 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 137 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
      At line 156 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
      At line 171 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 57 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 138 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
      At line 157 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
      At line 172 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 56 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 127 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 55 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 126 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 30 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 29 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntNesting unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 25 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 233 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 26 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 234 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 24 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 133 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 27 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 221 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
      At line 238 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 28 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 239 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OSTaskSwHook
   Definitions
      At line 31 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
   Uses
      At line 229 in file RTE\Device\STM32F103ZE\Ucos\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
8 symbols
353 symbols in table
